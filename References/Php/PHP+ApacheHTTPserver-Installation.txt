1. Download 
    a) apache http server source package (http://httpd.apache.org/download.cgi)
    httpd-2.4.46.tar.gz

    b) Apache Portable runtime (APR) libraries source package (https://apr.apache.org/download.cgi)
    apr-1.7.0.tar.gz
    apr-util-1.6.1.tar.gz
    apr-iconv-1.2.2.tar.gz

    c) php source package (https://www.php.net/downloads)
    php-7.3.21.tar.gz
    
===================
Apache installation
===================
2. Extract httpd-2.4.46.tar.gz, and copy its contents to /opt/apache2

3. a) Extract apr-1.7.0.tar.gz, rename extracted folder to "apr", and copy it into /opt/apache/srclib
   b) Extract apr-util-1.6.1.tar.gz, rename extracted folder to "apr-util", and copy it into /opt/apache/srclib
   c) Extract apr-iconv-1.2.2.tar.gz, rename extracted folder to "apr-iconv", and copy it into /opt/apache/srclib

    $ ls -l /opt/apache2/srclib/
    -rw-r--r--  1 gsskhan gsskhan  121 Feb 11  2005 Makefile.in
    drwxr-xr-x 20 gsskhan gsskhan 4096 Oct 18  2017 apr-util
    drwxr-xr-x 10 gsskhan gsskhan 4096 Oct 18  2017 apr-iconv
    drwxr-xr-x 27 gsskhan gsskhan 4096 Apr  1  2019 apr

4. Build and install Apache http server.

    Pre-requisite:
    ( GCC compiler and make should be pre-installed. 
    It can safely installed by running:- $ sudo apt install build-essential 
    It will install gcc, g++, make and other essential build libraries. )

    $ cd /opt/apache2/
    $ ./configure --prefix=/opt/apache2
    $ make
    $ make install

    If no errors observed, then Apache Http Server has been installed.
    Note:   I got package missing error in ./configure step, so I did additionally, and re-ran the step
            $ sudo apt install libxml2-dev

5. Configure Apache Http Server

    $ vi /opt/apache2/conf/httpd.conf

    Uncomment & Update To: Listen 7080
    Uncomment & Update To: ServerName localhost

6. To start/stop server

    $ /opt/apache2/bin/httpd -k start
    $ /opt/apache2/bin/httpd -k stop
    $ /opt/apache2/bin/httpd -k restart

7. Start Apache Http Server, and browse http://localhost:7080. A working default page should show up in browser.

================
PHP installation
================
8. Extract php-7.3.21.tar.gz, rename extracted folder to "php", and copy it into /opt/php

9. Build and install php

    $ cd /opt/php
    $ ./configure --with-apxs2=/opt/apache2/bin/apxs --prefix=/opt/php --with-openssl
    $ make
    $ make install
    $ cp php.ini-development ./lib/php.ini

    Update php.ini file at /opt/apache2/lib/php.ini, and add below to it:
    include_path = ".:/opt/php/lib/php"

10. Edit httpd.conf to load the PHP module. 

    The make install from above may have already added this for us, but be sure to check. 
    Open file /opt/apache2/conf/httpd.conf and check if below line is present and uncommented.
    
    LoadModule php7_module modules/libphp7.so

11. Tell Apache to parse certain extensions as PHP.

    Open file /opt/apache2/conf/httpd.conf, and add below to end of it.

    <FilesMatch \.php$>
        SetHandler application/x-httpd-php
    </FilesMatch>

12. Start Apache Http Server.

    $ /opt/apache2/bin/httpd -k start

======================================
Verification of php working in apache.
======================================
13.
i) create a file info.php with, following contents and copy it into apache DocumentRoot location.

    $ cat /opt/apache2/htdocs/info.php 
    <html>
    <?php
        phpinfo();
    ?>
    </html>

ii) Re-start apache http server, and navigate to http://localhost:7080/info.php in Browser. 

    It should display a PHP installation information page.

    $ /opt/apache2/bin/httpd -k restart

===========================================
Installing the MongoDB PHP Driver with PECL
===========================================
14.
i) Run the following command to install the driver:

    $ cs /opt/php
    $ export PATH=$PATH:/opt/php/bin (Do in your terminal onetime, no need to set globally)
    $ pecl search mongodb
    $ pecl install mongodb

ii) Add the following line to your php.ini file (/opt/php/lib/php.ini):

extension=mongodb.so

Note: If the build process for either installation method fails to find a TLS library,
check that the development packages (e.g. libssl-dev) is present. 
It may be installed by running: $ sudo apt install libssl-dev


